#!/usr/bin/python
# -*- encoding: utf-8 -*-
import os, sys, struct, time, thread, socket, traceback
from binascii import unhexlify, hexlify
from decimal import Decimal

from electrum import Wallet, Interface, WalletVerifier, SimpleConfig
from electrum import WalletSynchronizer, Transaction, bitcoin, util
import ecdsa, pyudev

from inputwindow import Ui_InputWindow
from waitwindow import Ui_WaitWindow
from PySide import QtGui, QtCore


DEST_ADDR = '1Ee7G1y5odBa93CTtfDgFxcxQHmiwcYRNw'
MAX_BTC = 21.e6
ELECTRUM_SERVER = 'electrum.no-ip.org:50002:s'
CACHE_DIR = './cache'

assert bitcoin.is_valid(DEST_ADDR)


def centerWidget(widget):
    pos = widget.frameGeometry()
    pos.moveCenter(QtGui.QDesktopWidget().availableGeometry().center())
    widget.move(pos.topLeft())    


class InputWindow(QtGui.QDialog):
    amount = -1
    
    def __init__(self):
        super(InputWindow, self).__init__()
        self._ui = Ui_InputWindow()
        self._ui.setupUi(self)
        centerWidget(self)
        
        validator = QtGui.QDoubleValidator(0., MAX_BTC, 8)
        self._ui.amount.setValidator(validator)
        
        self._ui.next.released.connect(self.next_handler)
        self._ui.quit.released.connect(self.reject)
        self.finished.connect(self.finished_handler)
        
        self.exec_()
        
    def next_handler(self):
        try:
            self.amount = Decimal(self._ui.amount.text())
            assert(self.amount > 0)
            assert(self.amount < MAX_BTC)
            self.accept()
        except:
            QtGui.QMessageBox.warning(self, 'Invalid amount',
                                      'Please check the transaction amount and try again.')
            
    def finished_handler(self, r):
        if r == QtGui.QDialog.Rejected:
            sys.exit(0)
        
        
class CancelableThread(QtCore.QThread):
    critical = False
    canceled = False
    @QtCore.Slot()
    def cancel(self):
        self.canceled = True
        
    
class WaitWindow(QtGui.QDialog):
    def __init__(self, thread):
        super(WaitWindow, self).__init__()
        self._ui = Ui_WaitWindow()
        self._ui.setupUi(self)
        
        self._init_image()
        
        self.adjustSize()
        centerWidget(self)
        
        self.thread = thread
        self.finished.connect(self.finished_handler)        
        thread.finished.connect(self.accept)
        thread.start()
        self.exec_()

    def _init_image(self):
        pass
    
    def finished_handler(self, r):
        if self.thread.isRunning():
            self.thread.cancel()
            if self.thread.critical:
                self.thread.wait()
            elif not self.thread.wait(10000):
                self.thread.terminate()
        self._finished(r)
        
    def _finished(self, r):
        pass


class DeviceWaitThread(CancelableThread):
    udev_dev = None
    
    def __init__(self, vendor, product, subsystem='hidraw'):
        super(DeviceWaitThread, self).__init__()
        self.vendor = vendor
        self.product = product
        self.subsystem = subsystem
        
    def _find_usbid(self, dev):
        ids = ['idVendor', 'idProduct']
        while dev:
            attr = dev.attributes
            if False not in [x in attr for x in ids]:
                return tuple([int(attr[x], 16) for x in ids])
            dev = dev.parent
        
    def udev_event(self, action, device):
        if action == 'add':
            usbid = self._find_usbid(device)
            if not usbid:
                print('Could not recognize USB ID for device %s' % dev.device_path)
                return
            print('USB device %04x:%04x plugged' % usbid)
            if usbid == (self.vendor, self.product):
                print('USB ID matches the expected one')
                self.udev_dev = device
                self.canceled = True
        
    def run(self):
        context = pyudev.Context()
        # try to enumerate from already plugged devices
        for device in context.list_devices(subsystem=self.subsystem):
            usbid = self._find_usbid(device)
            if usbid == (self.vendor, self.product):
                self.udev_dev = device
                return
        # wait for the device to be plugged
        monitor = pyudev.Monitor.from_netlink(context)
        monitor.filter_by(self.subsystem)
        observer = pyudev.MonitorObserver(monitor, self.udev_event)
        observer.start()
        while not self.canceled:
            time.sleep(.1)
        observer.stop()


class DeviceWaitWindow(WaitWindow):
    def __init__(self, vendor, product, subsystem='hidraw'):
        thread = DeviceWaitThread(vendor, product, subsystem)
        super(DeviceWaitWindow, self).__init__(thread)
        
    def _init_image(self):
        pixmap = QtGui.QPixmap(':/images/usb.png')
        self._ui.animation.setPixmap(pixmap)

    def _finished(self, r):
        self.dev = self.thread.udev_dev


class MyWalletVerifier(WalletVerifier):
    def add_header(self, hdr):
        with self.lock:
            self.pending_headers.append(hdr)


class BTCToken:
    dev = None
    def __init__(self, device_node):
        self.dev = open(device_node, 'r+b', buffering=0)
    def send(self, packet):
        #print 'send:', repr(packet)
        self.dev.write('\x00' + packet.ljust(64, '\x00'))
    def recv(self):
        packet = self.dev.read(64)
        #print 'recv:', repr(packet)
        return packet
    def ask_pubkey(self):
        self.send('BTCToken')
        packet = self.recv()
        if not packet.startswith('Yes I am'):
            return None
        size, = struct.unpack('<H', packet[8:10])
        pubkey = ''
        while size > 0:
            packet = self.recv()
            pubkey += packet[:min(len(packet), size)]
            size -= len(packet)
        return pubkey
    def send_tx(self, tx):
        self.send('RAWTXlen'+struct.pack('<H',len(tx)))
        while len(tx):
            self.send(tx[:64])
            tx = tx[64:]
    def recv_ok(self):
        assert(self.recv().startswith('OK'))
    def send_sameaddr(self, idx):
        self.send('SameAddr'+struct.pack('<B',idx))
    def send_thirdparty(self):
        self.send('ThirdPty')
    def send_merkle(self, merkle, pos):
        for i,x in enumerate(merkle):
            self.send('MerkleNode'+chr((pos >> i) & 1)+x.decode('hex')[::-1])
        self.send('MerkleNode\xff')
    def send_blocks(self, verifier, blk):
        while True:
            hdr = verifier.read_header(blk)
            if not hdr:
                print 'requesting blk #', blk, 'from server'
                hdr = verifier.interface.synchronous_get([ ('blockchain.block.get_header',[blk]) ])[0]
                verifier.add_header(hdr)
            hdr = verifier.header_to_string(hdr)
            print 'blk #', blk, hdr
            hdr = unhexlify(hdr)
            blk += 1
            self.send('Blk1'+hdr[:36])
            self.send('Blk2'+hdr[36:])
            recved = self.recv()
            if recved.startswith('Trusted'):
                break
            assert(recved.startswith('MoreData'))
    def recv_dbg(self, num_dbg):
        for i in xrange(num_dbg):
            print repr(self.recv())


def genFixedPubKeySequence(orig_addr):
    class FixedPubKeySequence(object):
        def __init__(self, *args):
            pass
        def get_address(self, sequence):
            if sequence == (0,0):
                return orig_addr
        def get_pubkey(self, sequence, mpk=None):
            if sequence == (0,0):
                return hexlify(orig_pubkey)
        def get_input_info(self, sequence):
            return self.get_address(sequence), None
    return FixedPubKeySequence


class TransactionProcessThread(CancelableThread):
    completed_ok = False
    err_msg = None
    verifier = None
    synchronizer = None
    interface = None
    
    def __init__(self, btctoken, amount):
        super(TransactionProcessThread, self).__init__()
        self.btctoken = btctoken
        self.amount = amount
        
    def stop_subthreads(self):
        if self.verifier:
            self.verifier.stop()
        if self.synchronizer:
            self.synchronizer.stop()
        if self.interface:
            self.interface.stop()
        
    def cancel(self):
        self.canceled = True
        self.stop_subthreads()
        
    def run(self):
        try:
            try:
                self.do_tx()
            except IOError as e:
                if e.errno in [5, 19]:
                    traceback.print_exc()
                    self.err_msg = 'USB device unplugged.'
                    return
                raise e
        except:
            traceback.print_exc()
            self.err_msg = traceback.format_exc()
        
    def do_tx(self):
        tx_amount = self.amount
        btctoken = self.btctoken
        
        orig_pubkey = btctoken.ask_pubkey()
        if not orig_pubkey:
            self.err_msg = 'USB device was not recognized, please try again.'
            return
            
        orig_addr = bitcoin.public_key_to_bc_address(orig_pubkey)
        print '\n\nCostumer bitcoin address:', orig_addr, '\n'
        
        wallet_config = SimpleConfig({
            'wallet_path': os.path.join(CACHE_DIR,'%s.wallet'%orig_addr)
        })
        wallet_config.set_key('master_public_key', 'placeholder')
        wallet_config.set_key('use_change', False)
        wallet_config.set_key('gap_limit', 1)
        wallet_config.set_key('server', ELECTRUM_SERVER)
        wallet_config.set_key('auto_cycle', True)
        self.wallet_config = wallet_config
        
        interface = Interface(wallet_config)
        self.interface = interface
        interface.register_callback('disconnected', interface.stop)
        interface.start()
        if not interface.is_connected:
            self.err_msg = 'Error connecting to the Electrum server, please try again.'
            return
        
        wallet = Wallet(wallet_config)
        wallet.SequenceClass = genFixedPubKeySequence(orig_addr)
        wallet.sequences = {}
        wallet.sequences[0] = wallet.SequenceClass(None)
        self.wallet = wallet
        
        wallet.interface = interface
        verifier = MyWalletVerifier(interface, wallet_config)
        self.verifier = verifier
        wallet.set_verifier(verifier)
        synchronizer = WalletSynchronizer(wallet, wallet_config)
        synchronizer.start()
        self.synchronizer = synchronizer
        verifier.start()
        wallet.update()
        
        if self.canceled:
            return
        
        print '\n\n'
        print 'balance:', repr(map(util.format_satoshis, wallet.get_balance()))
        print '\n\n'
        
        wallet_config.save()
        
        tx_amount = int(tx_amount*Decimal('1e8'))  # from BTC to Satoshi
        try:
            raw_tx = wallet.mktx([(DEST_ADDR, tx_amount)], None, None, orig_addr, None)
        except ValueError as e:
            if e.message == 'Not enough funds':
                self.err_msg = e.message
                return
            raise e
        print 'raw tx:', raw_tx.raw
        print repr(raw_tx.deserialize())
        btctoken.send_tx(unhexlify(raw_tx.raw))
        btctoken.recv_ok()
        print '\n\n'
        
        for tx_in in raw_tx.inputs:
            if self.canceled:
                return            
            tx_hash = tx_in['tx_hash']
            tx = wallet.transactions.get(tx_hash)
            tx_in_addrs = [i['address'] for i in tx.inputs]
            try: idx_same = tx_in_addrs.index(orig_addr)
            except: idx_same = -1
            if idx_same >= 0:
                print 'input tx signed by same addr #',idx_same
                print 'raw tx:',tx.raw
                print repr(tx.deserialize())
                btctoken.send_sameaddr(idx_same)
                btctoken.send_tx(unhexlify(tx.raw))
                btctoken.recv_ok()
            else:
                print 'input tx signed by third parties'
                print 'raw tx:',tx.raw
                print repr(tx.deserialize())
                tx_height, _ = verifier.get_txpos(tx_hash)
                res = interface.synchronous_get([ ('blockchain.transaction.get_merkle',[tx_hash,tx_height]) ])[0]
                btctoken.send_thirdparty()
                btctoken.send_tx(unhexlify(tx.raw))
                print 'sending merkle tree'
                print repr((res['merkle'], tx_hash, res['pos']))
                btctoken.send_merkle(res['merkle'], res['pos'])
                print 'sending headers starting from blk %d' % tx_height
                btctoken.send_blocks(verifier, tx_height)
                btctoken.recv_ok()
            print '\n\n'
            
        # do not kill the thread past this point
        self.critical = True
        
        verifying_key = bitcoin.ecdsa.VerifyingKey.from_string(orig_pubkey[1:], curve=bitcoin.SECP256k1)
        
        # get signatures from device
        print 'should now get', len(raw_tx.inputs), 'signatures'
        for i in xrange(len(raw_tx.inputs)):
            sig = btctoken.recv()
            print 'sig:', hexlify(sig)
            
            # convert signature to DER format
            r,s = ecdsa.util.sigdecode_string(sig, bitcoin.SECP256k1.order)
            sig = ecdsa.util.sigencode_der(r,s, bitcoin.SECP256k1.order)
            
            # check if signature is valid
            tx_for_sig = raw_tx.serialize(raw_tx.inputs, raw_tx.outputs, for_sig = i)
            tx_for_sig_hash = bitcoin.Hash(unhexlify(tx_for_sig))
            assert(verifying_key.verify_digest(sig, tx_for_sig_hash, sigdecode = ecdsa.util.sigdecode_der))
            
            # copy to transaction
            raw_tx.inputs[i]['pubkeysig'] = [(orig_pubkey, sig)]
        
        print '\n\n'
        
        # now we have a complete (signed) transaction
        raw_tx.is_complete = True
        raw_tx.raw = raw_tx.serialize(raw_tx.inputs, raw_tx.outputs)
        
        print 'complete tx:', raw_tx.raw
        print '\n\n'
        
        wallet.sendtx(raw_tx)
        
        self.completed_ok = True
        self.stop_subthreads()
        
        
class TransactionProcessWindow(WaitWindow):
    def __init__(self, btctoken, amount):
        thread = TransactionProcessThread(btctoken, amount)
        super(TransactionProcessWindow, self).__init__(thread)
        
    def _init_image(self):
        self.movie = QtGui.QMovie(':/images/wait.gif')
        self._ui.animation.setMovie(self.movie)
        self.movie.start()
        
    def _finished(self, r):
        self.completed_ok = self.thread.completed_ok
        self.err_msg = self.thread.err_msg
        
        if self.completed_ok:
            self._ui.animation.setMovie(None)
            self._ui.animation.setText("<b>Transaction completed successfuly</b>")
            
            self.show()
            for i in xrange(200):
                QtCore.QCoreApplication.processEvents()
                time.sleep(.01)
            self.hide()
        elif self.err_msg:
            QtGui.QMessageBox.warning(self, 'Error', unicode(self.err_msg, 'utf-8'))


def main():
    app = QtGui.QApplication(sys.argv)
    
    try:
        os.makedirs(CACHE_DIR)
    except:
        pass

    while True:
        dlg = InputWindow()
        amount = dlg.amount
        dlg = DeviceWaitWindow(0xffff, 0x0bad)
        if dlg.dev == None:
            continue  # cancelled
        btctoken = BTCToken(dlg.dev.device_node)
        dlg = TransactionProcessWindow(btctoken, amount)
        print 'completed ok:', dlg.completed_ok


if __name__ == '__main__':
    main()

